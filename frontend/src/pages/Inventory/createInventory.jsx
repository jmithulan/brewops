import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import toast from 'react-hot-toast';
import { useNavigate } from 'react-router-dom';

import Spinner from '../../components/Spinner';

const CreateInventory = () => {
  const [quantity, setQuantity] = useState('');
  const [loading, setLoading] = useState(false);
  const [quantityError, setQuantityError] = useState('');
  const [createdInventoryId, setCreatedInventoryId] = useState('');
  const [preGeneratedInventoryId, setPreGeneratedInventoryId] = useState('');
  const navigate = useNavigate();
  const quantityRef = useRef(null);

  useEffect(() => {
    // pre-generate inventory id in format INV-YYYYMMDD-HHMM using local time
    const pad = (n) => n.toString().padStart(2, '0');
    const now = new Date();
    const year = now.getFullYear();
    const month = pad(now.getMonth() + 1);
    const day = pad(now.getDate());
    const hours = pad(now.getHours());
    const minutes = pad(now.getMinutes());
    const generated = `INV-${year}${month}${day}-${hours}${minutes}`;
    setPreGeneratedInventoryId(generated);
  }, []);

  useEffect(() => {
    // focus the quantity input when modal finishes loading
    if (!loading) {
      setTimeout(() => {
        quantityRef.current?.focus();
      }, 0);
    }
  }, [loading]);

  const handleSaveInventory = () => {
    if (quantityError || !quantity) {
      toast.error('Please fill all fields correctly');
      return;
    }
    if (quantity <= 0) {
      toast.error('Quantity must be greater than 0');
      return;
    }
    const data = {
      quantity: parseInt(quantity),
    };
    setLoading(true);
    axios
      .post('http://localhost:5000/inventory', data)
      .then((response) => {
        setLoading(false);
        // Display the auto-generated inventory ID from backend
        if (response.data && response.data.data && response.data.data.inventoryid) {
          setCreatedInventoryId(response.data.data.inventoryid);
          toast.success(`Inventory created successfully! ID: ${response.data.data.inventoryid}`);
        } else {
          // fallback confirmation when server didn't return an id
          toast.success('Inventory created successfully!');
        }
  // Navigate after short delay so user can read the toast
  setTimeout(() => navigate('/inventories'), );
      })
      .catch((error) => {
        console.error('Error saving inventory:', error);
        toast.error('An error occurred while saving inventory');
        setLoading(false);
      });
  };

  useEffect(() => {
    // Real-time validation for quantity
    if (quantity.length > 6) {
      setQuantityError('Quantity must not exceed 6 digits');
    } else if (quantity && parseInt(quantity) <= 0) {
      setQuantityError('Quantity must be greater than 0');
    } else {
      setQuantityError('');
    }
  }, [quantity]);

  const handleQuantityChange = (e) => {
    const value = e.target.value;
    if (value.length <= 6) {
      setQuantity(value);
    }
  };

  return (
    <div className="min-h-screen flex flex-col">
  {/* Modal backdrop */}
  <div className='fixed inset-0 bg-black/60 flex items-center justify-center z-50' onClick={() => navigate('/inventories')}>
        <div className='max-w-2xl w-full mx-4 bg-white p-8 rounded-lg shadow-md' onClick={(e) => e.stopPropagation()}>
          <h1 className='text-2xl my-2 text-center font-bold text-gray-800'>Create Inventory</h1>

          {loading && <Spinner />}

          {!loading && (
            <div className='space-y-4'>
              <div>
                <label className='block text-md mb-2 text-gray-700'>Inventory Number</label>
                <input
                  type="text"
                  value={createdInventoryId || preGeneratedInventoryId || ''}
                  placeholder={createdInventoryId || preGeneratedInventoryId ? '' : 'Will be generated by server (INV-YYYYMMDD-HHMM)'}
                  disabled
                  className='border border-gray-300 bg-gray-100 text-gray-700 px-4 py-2 w-full rounded-md'
                />
                <p className='text-xs text-gray-500 mt-1'>Inventory ID is auto-generated by the server.</p>
              </div>

              <div>
                <label className='block text-md mb-2 text-gray-700'>Quantity (kg)</label>
                <input
                  type="number"
                  ref={quantityRef}
                  value={quantity}
                  onChange={handleQuantityChange}
                  min="1"
                  max="999999"
                  placeholder="Enter quantity in kilograms"
                  className={`border border-gray-300 px-4 py-2 w-full rounded-md focus:outline-none focus:ring focus:ring-blue-300 ${quantityError && 'border-red-500'}`}
                />
                {quantityError && <div className="text-red-500 text-sm mt-1">{quantityError}</div>}
                <p className='text-sm text-gray-500 mt-1'>* Enter the quantity of raw leaves in kilograms (max 6 digits)</p>
              </div>

              <div className='flex gap-4'>
                <button 
                  className='py-2 px-6 bg-green-600 text-white rounded-md hover:bg-black focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed' 
                  onClick={handleSaveInventory}
                  disabled={loading || quantityError || !quantity}
                >
                  {loading ? 'Saving...' : 'Save Inventory'}
                </button>

                <button 
                  className='py-2 px-6 bg-gray-500 text-white rounded-md hover:bg-gray-700 focus:outline-none' 
                  onClick={() => navigate('/inventories')}
                >
                  Cancel
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default CreateInventory;